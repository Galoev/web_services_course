import numpy as np
import cv2

from protos.builds.services_pb2 import Image, Request
from protos.builds.services_pb2_grpc import WatermarkServiceServicer


class WatermarkService(WatermarkServiceServicer):
    """Service for adding a watermark to the image.

    Args:
        WatermarkServiceServicer (_type_): generated by grpc class
    """

    def addImageWatermark(self, request: Request, context) -> Image:
        """Adds a watermark (logo) to the image.

        Args:
            request (Request): contains logo image, main image and opacity level
            context (_type_): context

        Returns:
            Image: finished main image with added watermark (logo)
        """
        data_logo_img = request.logo_image
        data_main_img = request.main_imgae
        opacity = request.opacity / 100

        logo_img = self.__unpackImage(data_logo_img)
        main_img = self.__unpackImage(data_main_img)

        result_img = self.__addImageWatermark(logo_img, main_img, opacity)
        result_img = self.__packIntoImage(result_img)

        return result_img

    def __unpackImage(self, img_raw_data: Image) -> np.ndarray:
        """Unpacks an object of type Image into a np.ndarray.

        Args:
            img_raw_data (Image): object of type Image

        Returns:
            np.ndarray: ready object of type np.ndarray
        """
        img_bytes = img_raw_data.data
        h, w, c = img_raw_data.height, img_raw_data.width, img_raw_data.channel
        img = np.frombuffer(img_bytes, dtype="uint8")
        img = img.reshape(h, w, c)
        return img

    def __packIntoImage(self, img: np.ndarray) -> Image:
        """Wraps a numpy array into a type Image.

        Args:
            img (np.ndarray): wraparound array

        Returns:
            Image: collected object of type Image
        """
        h, w, c = img.shape
        return Image(height=h, width=w, channel=c, data=img.tobytes())

    def __addImageWatermark(
        self, logo_img: np.ndarray, main_img: np.ndarray, opacity: int
    ) -> np.ndarray:
        """Core logic for adding a watermark (logo) to an image.

        Args:
            logo_img (np.ndarray): watermark (logo)
            main_img (np.ndarray): the main image on which the watermark (logo) will be added
            opacity (int): degree of opacity

        Returns:
            np.ndarray: finished image with a watermark (logo) added to it
        """
        main_img = main_img.copy()

        h_logo, w_logo, _ = logo_img.shape
        h_img, w_img, _ = main_img.shape

        center_y = int(h_img / 2)
        center_x = int(w_img / 2)

        top_y = center_y - int(h_logo / 2)
        left_x = center_x - int(w_logo / 2)
        bottom_y = top_y + h_logo
        right_x = left_x + w_logo

        destination = main_img[top_y:bottom_y, left_x:right_x]
        result = cv2.addWeighted(destination, 1, logo_img, opacity, 0)
        main_img[top_y:bottom_y, left_x:right_x] = result

        return main_img
